stages:
  - test
  - deploy

python-test:
  stage: test
  image: python:3.10
  tags:
    - saas-linux-medium-amd64
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu
    - pip install -e .
    - pip install pytest pytest-cov
  script:
    - python -m unittest discover
  cache:
    key: ${CI_PROJECT_NAME}
    paths:
      - venv/

deploy-pypi:
  stage: deploy
  image: python:3.10
  tags:
    - saas-linux-medium-amd64
  needs: ["python-test"]
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip twine wheel
  script:
    - |
      if git cat-file -e $CI_COMMIT_BEFORE_SHA:setup.py >/dev/null 2>&1; then
        OLD_VERSION=$(git show $CI_COMMIT_BEFORE_SHA:setup.py | grep -E "version=" | cut -d"'" -f2)
      else
        echo "setup.py not found in previous commit. Assuming version change."
        OLD_VERSION=""
      fi
      NEW_VERSION=$(grep -E "version=" setup.py | cut -d"'" -f2)
      echo "Old version: $OLD_VERSION"
      echo "New version: $NEW_VERSION"
      if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
        python setup.py sdist bdist_wheel
        twine upload dist/* --username __token__ --password $PYPI_API_TOKEN
        echo "$NEW_VERSION" > .new_version
      else
        echo "" > .new_version
        echo "No version change."
      fi
  artifacts:
    paths:
      - .new_version
    when: always

docker-deploy:
  stage: deploy
  image: docker:28.0.1
  tags:
    - saas-linux-medium-amd64
  services:
    - docker:dind
  needs: ["deploy-pypi"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache grep
    - echo "$DOCKER_REGISTRY_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - NEW_VERSION=$(cat .new_version)
    - if [ -z "$NEW_VERSION" ]; then
        echo "No new version, skipping Docker deploy";
        exit 0;
      fi
    - docker pull "$CI_REGISTRY_IMAGE:latest" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "$CI_REGISTRY_IMAGE:latest" -t "$CI_REGISTRY_IMAGE:${NEW_VERSION}" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:${NEW_VERSION}"
    - docker push "$CI_REGISTRY_IMAGE:latest"
