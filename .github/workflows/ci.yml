name: CI

on:
  workflow_dispatch:

jobs:
  test:
    name: "Python Tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.17
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.17
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov
      - name: Run tests
        run: |
          source venv/bin/activate
          python -m unittest discover

  deploy-pypi:
    name: "Publish to PyPI"
    needs: test
    runs-on: ubuntu-latest
    environment: audio_miner
    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    outputs:
      new_version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Fetch previous commit
        run: |
          git fetch --no-tags --prune --depth=2 origin ${{ github.ref }}
      - name: Determine version
        id: get-version
        run: |
          if git show HEAD^:setup.py >/dev/null 2>&1; then
            OLD_VERSION=$(git show HEAD^:setup.py | grep -E "version=" | cut -d"'" -f2)
          else
            OLD_VERSION=""
          fi
          NEW_VERSION=$(grep -E "version=" setup.py | cut -d"'" -f2)
          echo "old=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
      - name: Write new version
        id: set-version
        run: |
          echo "${{ steps.get-version.outputs.new }}" > .new_version # This file can still be useful for artifacts if needed
          echo "version=${{ steps.get-version.outputs.new }}" >> $GITHUB_OUTPUT
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.17
      - name: Install build dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip twine wheel
      - name: Upload package
        if: ${{ steps.get-version.outputs.new != steps.get-version.outputs.old }}
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel
          twine upload dist/* -u __token__ -p ${{ env.PYPI_API_TOKEN }}

  docker-deploy:
    name: "Docker Deploy"
    needs: deploy-pypi
    runs-on: ubuntu-latest
    environment: audio_miner
    env:
      CI_REGISTRY: ${{ secrets.CI_REGISTRY }}
      CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
      DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      CI_REGISTRY_IMAGE: ${{ secrets.CI_REGISTRY_IMAGE }}
    steps:
      - uses: actions/checkout@v3
      - name: Get new version
        id: get-new-version
        run: |
          echo "new=${{ needs.deploy-pypi.outputs.new_version }}" >> $GITHUB_OUTPUT
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CI_REGISTRY }}
          username: ${{ env.CI_REGISTRY_USER }}
          password: ${{ env.DOCKER_REGISTRY_TOKEN }}
      - name: Build and push
        if: ${{ steps.get-new-version.outputs.new != '' }}
        run: |
          docker pull ${{ env.CI_REGISTRY_IMAGE }}:latest || true
          docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from ${{ env.CI_REGISTRY_IMAGE }}:latest -t ${{ env.CI_REGISTRY_IMAGE }}:${{ steps.get-new-version.outputs.new }} -t ${{ env.CI_REGISTRY_IMAGE }}:latest .
          docker push ${{ env.CI_REGISTRY_IMAGE }}:${{ steps.get-new-version.outputs.new }}
          docker push ${{ env.CI_REGISTRY_IMAGE }}:latest
